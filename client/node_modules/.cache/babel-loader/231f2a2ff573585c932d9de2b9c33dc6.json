{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport { UserActionTypes } from \"./user.types\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure, checkUserSession } from \"./user.actions\";\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n}\nexport function* signInWithEmail(_ref) {\n  let {\n    payload: {\n      email,\n      password\n    }\n  } = _ref;\n\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(emailSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(emailSignInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["C:/Users/z299779/Desktop/WebDeveloper Course/16_ReactCourse/03_E-Commerce/crwn-clothing/src/redux/user/user-sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","googleSignInSuccess","googleSignInFailure","emailSignInSuccess","emailSignInFailure","checkUserSession","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","id","data","error","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAAQC,eAAR,QAA8B,cAA9B;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,EAA0DC,cAA1D,QAAgF,+BAAhF;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,kBAAnD,EAAuEC,kBAAvE,EAA2FC,gBAA3F,QAAmH,gBAAnH;AAGA,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAG;AACC,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMV,IAAI,CAACW,eAAL,CAAqBV,cAArB,CAAvB;AACA,UAAMW,OAAO,GAAG,MAAMd,IAAI,CAACI,yBAAD,EAA4BQ,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMlB,GAAG,CAACQ,mBAAmB,CAAC;AAAEW,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAApB,CAAT;AACH,GALD,CAKE,OAAMC,KAAN,EAAY;AACV,UAAMrB,GAAG,CAACS,mBAAmB,CAACY,KAAD,CAApB,CAAT;AAEH;AACJ;AAED,OAAO,UAAUC,eAAV,OAAuD;AAAA,MAA7B;AAACC,IAAAA,OAAO,EAAE;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR;AAAV,GAA6B;;AAC1D,MAAG;AACC,UAAM;AAAEX,MAAAA;AAAF,QAAW,MAAMV,IAAI,CAACsB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMT,OAAO,GAAG,MAAMd,IAAI,CAACI,yBAAD,EAA4BQ,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMlB,GAAG,CAACU,kBAAkB,CAAC;AAAES,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAnB,CAAT;AACH,GALD,CAKE,OAAMC,KAAN,EAAY;AACV,UAAMrB,GAAG,CAACW,kBAAkB,CAACU,KAAD,CAAnB,CAAT;AACH;AACJ;AAED,OAAO,UAAUM,mBAAV,GAA+B,CAErC;AAGD,OAAO,UAAUC,mBAAV,GAAgC;AACnC,QAAM7B,UAAU,CAACI,eAAe,CAAC0B,oBAAjB,EAAsChB,gBAAtC,CAAhB;AACH;AAGD,OAAO,UAAUiB,kBAAV,GAA+B;AAClC,QAAM/B,UAAU,CAACI,eAAe,CAAC4B,mBAAjB,EAAsCT,eAAtC,CAAhB;AACH;AAED,OAAO,UAAUU,kBAAV,GAA+B;AAClC,QAAMjC,UAAU,CAACI,eAAe,CAAC8B,kBAAjB,EAAoCN,mBAApC,CAAhB;AACH;AAED,OAAO,UAAUO,SAAV,GAAsB;AACzB,QAAMjC,GAAG,CAAC,CAACC,IAAI,CAAC0B,mBAAD,CAAL,EAA4B1B,IAAI,CAAC4B,kBAAD,CAAhC,CAAD,CAAT;AACH","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\r\nimport {UserActionTypes} from \"./user.types\";\r\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\r\nimport { googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure, checkUserSession } from \"./user.actions\";\r\n\r\n\r\nexport function* signInWithGoogle() {\r\n    try{\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n        const userRef = yield call(createUserProfileDocument, user);\r\n        const userSnapshot = yield userRef.get()\r\n        yield put(googleSignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\r\n    } catch(error){\r\n        yield put(googleSignInFailure(error))\r\n\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail({payload: {email, password}}){\r\n    try{\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        const userRef = yield call(createUserProfileDocument, user);\r\n        const userSnapshot = yield userRef.get()\r\n        yield put(emailSignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\r\n    } catch(error){\r\n        yield put(emailSignInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* isUserAuthenticated(){\r\n\r\n}\r\n\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle)\r\n}\r\n\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,isUserAuthenticated)\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart)])\r\n}"]},"metadata":{},"sourceType":"module"}