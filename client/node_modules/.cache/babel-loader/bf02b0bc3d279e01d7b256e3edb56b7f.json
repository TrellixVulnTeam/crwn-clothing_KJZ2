{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport { UserActionTypes } from \"./user.types\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { signInSuccess, signInFailure, checkUserSession } from \"./user.actions\";\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail(_ref) {\n  let {\n    payload: {\n      email,\n      password\n    }\n  } = _ref;\n\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // export function* isUserAuthenticated(){\n//     try{\n//     } catch(error){\n//         yield put(sign)\n//     }\n// }\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n} // export function* onCheckUserSession() {\n//     yield takeLatest(UserActionTypes.CHECK_USER_SESSION,isUserAuthenticated)\n// }\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["C:/Users/z299779/Desktop/WebDeveloper Course/16_ReactCourse/03_E-Commerce/crwn-clothing/src/redux/user/user-sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","checkUserSession","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAAQC,eAAR,QAA8B,cAA9B;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,EAA0DC,cAA1D,QAAgF,+BAAhF;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,gBAAvC,QAA+D,gBAA/D;AAGA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA2C;AAC9C,MAAG;AACC,UAAMC,OAAO,GAAG,MAAMX,IAAI,CAACI,yBAAD,EAA4BM,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMf,GAAG,CAACQ,aAAa,CAAC;AAAEQ,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACH,GAJD,CAIE,OAAMC,KAAN,EAAY;AACV,UAAMlB,GAAG,CAACS,aAAa,CAACS,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAG;AACC,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMhB,IAAI,CAACiB,eAAL,CAAqBhB,cAArB,CAAvB;AACA,UAAMM,uBAAuB,CAACS,IAAD,CAA7B;AACH,GAHD,CAGE,OAAMF,KAAN,EAAY;AACV,UAAMlB,GAAG,CAACS,aAAa,CAACS,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUI,eAAV,OAAuD;AAAA,MAA7B;AAACC,IAAAA,OAAO,EAAE;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR;AAAV,GAA6B;;AAC1D,MAAG;AACC,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMhB,IAAI,CAACsB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMd,uBAAuB,CAACS,IAAD,CAA7B;AACH,GAHD,CAGE,OAAMF,KAAN,EAAY;AACV,UAAMlB,GAAG,CAACS,aAAa,CAACS,KAAD,CAAd,CAAT;AACH;AACJ,C,CAED;AACA;AAEA;AACA;AACA;AACA;;AAGA,OAAO,UAAUS,mBAAV,GAAgC;AACnC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,oBAAjB,EAAsCT,gBAAtC,CAAhB;AACH;AAGD,OAAO,UAAUU,kBAAV,GAA+B;AAClC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,mBAAjB,EAAsCR,eAAtC,CAAhB;AACH,C,CAED;AACA;AACA;;AAEA,OAAO,UAAUS,SAAV,GAAsB;AACzB,QAAM9B,GAAG,CAAC,CAACC,IAAI,CAACyB,mBAAD,CAAL,EAA4BzB,IAAI,CAAC2B,kBAAD,CAAhC,CAAD,CAAT;AACH","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\r\nimport {UserActionTypes} from \"./user.types\";\r\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\r\nimport { signInSuccess, signInFailure, checkUserSession } from \"./user.actions\";\r\n\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth){\r\n    try{\r\n        const userRef = yield call(createUserProfileDocument, userAuth);\r\n        const userSnapshot = yield userRef.get()\r\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\r\n    } catch(error){\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n    try{\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user)\r\n    } catch(error){\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail({payload: {email, password}}){\r\n    try{\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield getSnapshotFromUserAuth(user)\r\n    } catch(error){\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\n// export function* isUserAuthenticated(){\r\n//     try{\r\n\r\n//     } catch(error){\r\n//         yield put(sign)\r\n//     }\r\n// }\r\n\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle)\r\n}\r\n\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\n\r\n// export function* onCheckUserSession() {\r\n//     yield takeLatest(UserActionTypes.CHECK_USER_SESSION,isUserAuthenticated)\r\n// }\r\n\r\nexport function* userSagas() {\r\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart)])\r\n}"]},"metadata":{},"sourceType":"module"}